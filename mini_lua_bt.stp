probe begin {
    warn(sprintf("Tracing %d (/home/spin6lock/work/troy/bin/skynet) for standard Lua 5.3...\n", target()))
}

global bts;
global quit = 0;

probe
    process("/home/spin6lock/work/troy/bin/skynet").function("luaL_*"),
    process("/home/spin6lock/work/troy/bin/skynet").function("lua_*")
{
    if (@defined($L) && !quit) {
        L = $L
        p = L->ci
        while (p != 0 && !quit) {
            tt = p->func->tt_ & 0x3f
            //printf("tt: %x\n", tt)
            if ( tt == 0x06 ) {
                printf("lua function\t")
                gc = p->func->value_->gc
                closure = &@cast(gc, "GCUnion", "/home/spin6lock/work/troy/bin/skynet")->cl
                lua_closure = &closure->l
                share_proto = lua_closure->p->sp
                source = @cast(share_proto, "SharedProto", "/home/spin6lock/work/troy/bin/skynet")->source
                //lineinfo = &@cast(share_proto, "SharedProto", "/home/spin6lock/work/troy/bin/skynet")->lineinfo
                lineinfo = share_proto->lineinfo
                line_index = p->u->l->savedpc - share_proto->code - 1
                printf("proto: %s\n", kernel_string(source + 27))
            }
            if ( tt == 0x16 ) {
                printf("light c function\n")
            }
            if ( tt == 0x26 ) {
                printf("c function\n")
            }
            p = p->previous
        }
        printf("=============\n")
    }
}

probe timer.s(5) {
    warn("Quiting now\\n")
    quit = 1;
    exit()
}
