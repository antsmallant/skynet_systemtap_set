probe begin {
    warn(sprintf("Tracing %d (@1) for standard Lua 5.3...\n", target()))
}

global quit = 0;

probe
    process(@1).function("luaL_*"),
    process(@1).function("lua_*")
{
    if (@defined($L) && !quit) {
        L = $L
        p = L->ci
        stack = ""
        while (p != 0 && !quit) {
            tt = p->func->tt_ & 0x3f
            //printf("tt: %x\n", tt)
            if ( tt == 0x06 ) {
                gc = p->func->value_->gc
                closure = &@cast(gc, "GCUnion", @1)->cl
                lua_closure = &closure->l
                share_proto = lua_closure->p->sp
                source = @cast(share_proto, "SharedProto", @1)->source
                lineinfo = share_proto->lineinfo
                line_index = p->u->l->savedpc - share_proto->code 
                filename = kernel_string(source + 27)
                lineno = kernel_int(lineinfo+line_index) - 1
                frame = sprintf("%s:%d", filename, lineno)
            }
            else if ( tt == 0x16 ) {
                    frame = "light c function"
                }
            else if ( tt == 0x26 ) {
                    frame = "c function"
                }
            else 
                frame = "nil"
            
            p = p->previous
            stack .= frame . ";"
        }
        if (stack != "") {
            print(stack)
            print("\n")
        }
    }
}

probe timer.s(5) {
    warn("Quiting now\\n")
    quit = 1;
    exit()
}
